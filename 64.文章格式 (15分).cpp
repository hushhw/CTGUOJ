// 17.文章格式 (15分)
	// 	C时间限制：3000 毫秒 |  C内存限制：3000 Kb
	// 	题目内容：
	// 	编写程序实现将一段文章格式化打印出来。打印时每行的长度为20个字符。
	// 	如果一行的最后一个单词超过了本行的20个字符的范围，则应把它移到下一行。
	// 	另外在每个单词之间增加一个空格，最后一个单词前面可能需要增加多个空格，
	// 	使每行的末尾准确地处在第20个位置处。
	// 	输入描述
	// 	输入n个单词（连续输入，每个单词不能超过20个字母，单词间用空格隔开，但不
	// 	要人为转行，也就是说如果输入的单词超过一行也不要按Enter）
	// 
	// 	输出描述
	// 	将上面n个单词分行打印，每行20个字符，如果一行只能放一个单词则单词后用空格填充，
	// 	若一行可放多个单词，则末尾必须为单词，且一个单词不能跨行输出。
	// 
	// 	输入样例
	// 	The relationship between XML functional dependencies and XML keys are also discussed
	// 
	// 	输出样例
	// 	The     relationship
	// 	between          XML
	// 	functional          
	// 	dependencies and XML
	// 	keys are        also
	// 	discussed
#include <cstdio>
#include <iostream>
#include <string>
using namespace std;

int main()
{
	string str;
	string s[101];
	int len[101];
	char c;
	getchar();
	int i=0;
	while(c = getchar())
	{
		
		if(c=='\n')
		{
			s[i++] = str;
			len[i] = str.length();
			str = "";
			cout<<s[i]<<endl;
			break;
		}
		if(c==' ')
		{
			s[i++] = str;
			len[i] = str.length();
			str = "";
			cout<<s[i]<<endl;
			continue;
		}
		str += c;
	}
	s[i++] = str;
	len[i] = str.length();

	int num = 0;
	for(int j=0; i<i; j++)
	{
		num+=len[i];
		if(num==20)
		{
			int sum = 0;
			for(int m=0; m<=j; m++)
			{
				if(m!=j)
				{
					cout<<"sss"<<endl;
					printf("%s",s[i]);
					sum += len[i]+1;
				}
				else
				{
					int sum = 20 - sum;
					while(sum)
					{
						cout<<" ";
						sum--;
					}
					printf("%s\n",s[i]);
				}
			}
		}
		else if(num>20)
		{
			int sum = 0;
			for(int m=0; m<j; m++)
			{
				if(m!=j-1)
				{
					cout<<"sss"<<endl;
					printf("%s",s[i]);
					sum += len[i]+1;
				}
				else
				{
					int sum = 20 - sum;
					while(sum)
					{
						cout<<" ";
						sum--;
					}
					printf("%s\n",s[i]);
				}
			}
		}	
	}
	system("pause");
	return 0;
}